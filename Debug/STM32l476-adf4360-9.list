
STM32l476-adf4360-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000377c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003950  08003950  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003958  08003958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800396c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800396c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ef  00000000  00000000  0002b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254ca  00000000  00000000  0002e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aedd  00000000  00000000  0005389a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7768  00000000  00000000  0005e777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  00145f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038ec 	.word	0x080038ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038ec 	.word	0x080038ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t Rcounter_Latch[3]={0,0,0};
 80004c6:	4a71      	ldr	r2, [pc, #452]	; (800068c <main+0x1cc>)
 80004c8:	f107 031c 	add.w	r3, r7, #28
 80004cc:	6812      	ldr	r2, [r2, #0]
 80004ce:	4611      	mov	r1, r2
 80004d0:	8019      	strh	r1, [r3, #0]
 80004d2:	3302      	adds	r3, #2
 80004d4:	0c12      	lsrs	r2, r2, #16
 80004d6:	701a      	strb	r2, [r3, #0]
  uint8_t Control_Latch[3]={0,0,0};
 80004d8:	4a6c      	ldr	r2, [pc, #432]	; (800068c <main+0x1cc>)
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	4611      	mov	r1, r2
 80004e2:	8019      	strh	r1, [r3, #0]
 80004e4:	3302      	adds	r3, #2
 80004e6:	0c12      	lsrs	r2, r2, #16
 80004e8:	701a      	strb	r2, [r3, #0]
  uint8_t Ncounter_Latch[3]={0,0,0};
 80004ea:	4a68      	ldr	r2, [pc, #416]	; (800068c <main+0x1cc>)
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	4611      	mov	r1, r2
 80004f4:	8019      	strh	r1, [r3, #0]
 80004f6:	3302      	adds	r3, #2
 80004f8:	0c12      	lsrs	r2, r2, #16
 80004fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb9a 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f8ca 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f9b2 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f980 	bl	800080c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800050c:	f000 f940 	bl	8000790 <MX_SPI2_Init>
	BAND_SELECT_CLOCK_DIVIDER_1
	BAND_SELECT_CLOCK_DIVIDER_2
	BAND_SELECT_CLOCK_DIVIDER_4
	BAND_SELECT_CLOCK_DIVIDER_8
   */
  	settings.band_select_clock_devider 		=     BAND_SELECT_CLOCK_DIVIDER_8 ;
 8000510:	2303      	movs	r3, #3
 8000512:	703b      	strb	r3, [r7, #0]
  /*
   	THREE_CONSECUTIVE_CYCLES
	FIVE_CONSECUTIVE_CYCLES
  */
	settings.lock_detect_precision 		=         FIVE_CONSECUTIVE_CYCLES ;
 8000514:	2301      	movs	r3, #1
 8000516:	707b      	strb	r3, [r7, #1]
  /*
   	PULSE_WIDTH_1_3ns
	PULSE_WIDTH_3ns
	PULSE_WIDTH_6
   */
	settings.antibacklash_pulse_width 	 =      PULSE_WIDTH_3ns ;
 8000518:	2300      	movs	r3, #0
 800051a:	70bb      	strb	r3, [r7, #2]
	//  В регистре R counter latch - R делитель (R14-R1) ( число от 1 до 16383 )
    settings.R_div						 =        	 2 ;
 800051c:	2302      	movs	r3, #2
 800051e:	80bb      	strh	r3, [r7, #4]


	//  В регистре N counter latch - B делитель (B13-B1) ( число от 3 до 8191 )
	settings.B_div                       =        10 ;
 8000520:	230a      	movs	r3, #10
 8000522:	80fb      	strh	r3, [r7, #6]
	//  В регистре N counter latch - A делитель (A5-A1)  (число от 2 до 31)
	settings.A_div                       =       8 ;
 8000524:	2308      	movs	r3, #8
 8000526:	723b      	strb	r3, [r7, #8]
	/*
	NORMAL_OPERATION
	ASYNCHRONOUS_POWER_DOWN
	SYNCHRONOUS_POWER_DOWN
	 */
	settings.mode						= 		NORMAL_OPERATION ;
 8000528:	2304      	movs	r3, #4
 800052a:	727b      	strb	r3, [r7, #9]
	ICP_mA_1_56
	ICP_mA_1_87
	ICP_mA_2_18
	ICP_mA_2_50
	 */
	settings.Icp_mA                     =     	ICP_mA_1_25 ;
 800052c:	2303      	movs	r3, #3
 800052e:	72bb      	strb	r3, [r7, #10]
	POWER_MINUS_9dbm
	POWER_MINUS_6dbm
	POWER_MINUS_3dbm
	POWER_0dbm
	 */
	settings.output_power_level			=		POWER_MINUS_9dbm ;
 8000530:	2300      	movs	r3, #0
 8000532:	72fb      	strb	r3, [r7, #11]

	/*
	 MUTE_DISABLE
	 MUTE_ENABLE
	 */
	settings.mute_til_lock_detect		=		MUTE_DISABLE ;
 8000534:	2300      	movs	r3, #0
 8000536:	733b      	strb	r3, [r7, #12]

	/*
	NORMAL
	THREE_STATE
	 */
	settings.charge_pump_output 		=		NORMAL ;
 8000538:	2300      	movs	r3, #0
 800053a:	737b      	strb	r3, [r7, #13]

	/*
	NEGATIVE
	POSITIVE
	 */
	settings.phase_detector_polarity	=		NEGATIVE ;
 800053c:	2300      	movs	r3, #0
 800053e:	73bb      	strb	r3, [r7, #14]


	settings.mux_out 					=		MUX_DVDD ;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]

	/*
	OP_NORMAL
	OP_R_A_B_COUNTERS_HELD_IN_RESET
	 */
	settings.counter_operation			=		OP_NORMAL ;
 8000544:	2300      	movs	r3, #0
 8000546:	743b      	strb	r3, [r7, #16]
	CORE_POWER_LEVEL_2_5mA
	CORE_POWER_LEVEL_5_0mA
	CORE_POWER_LEVEL_7_5mA
	CORE_POWER_LEVEL_10_0mA
	 */
	settings.core_power_level			=		CORE_POWER_LEVEL_5_0mA ;
 8000548:	2301      	movs	r3, #1
 800054a:	747b      	strb	r3, [r7, #17]
////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

  // Ждем пока микруха включится
  HAL_Delay(100); //100 мс
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f000 fbed 	bl	8000d2c <HAL_Delay>

  // Заполняем массивы на отправку
  //R counter Latch
  Rcounter_Latch[0]= (uint8_t)(settings.band_select_clock_devider<<4) | (uint8_t)(settings.lock_detect_precision<<2) | settings.antibacklash_pulse_width;
 8000552:	783b      	ldrb	r3, [r7, #0]
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	b2da      	uxtb	r2, r3
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4313      	orrs	r3, r2
 8000560:	b2da      	uxtb	r2, r3
 8000562:	78bb      	ldrb	r3, [r7, #2]
 8000564:	4313      	orrs	r3, r2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	773b      	strb	r3, [r7, #28]
  Rcounter_Latch[1]= (uint8_t)(settings.R_div>>6);
 800056a:	88bb      	ldrh	r3, [r7, #4]
 800056c:	099b      	lsrs	r3, r3, #6
 800056e:	b29b      	uxth	r3, r3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	777b      	strb	r3, [r7, #29]
  Rcounter_Latch[2]= (uint8_t)(settings.R_div<<2) | 0x01;
 8000574:	88bb      	ldrh	r3, [r7, #4]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	77bb      	strb	r3, [r7, #30]
  //Control Latch
  Control_Latch[0]=(settings.mode<<4) | (settings.Icp_mA>>2);
 8000584:	7a7b      	ldrb	r3, [r7, #9]
 8000586:	011b      	lsls	r3, r3, #4
 8000588:	b25a      	sxtb	r2, r3
 800058a:	7abb      	ldrb	r3, [r7, #10]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	b25b      	sxtb	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b25b      	sxtb	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	763b      	strb	r3, [r7, #24]
  Control_Latch[1]= (settings.Icp_mA<<6) | (settings.output_power_level<<4)| (settings.mute_til_lock_detect<<3) | (settings.charge_pump_output<<1) | settings.phase_detector_polarity;
 800059a:	7abb      	ldrb	r3, [r7, #10]
 800059c:	019b      	lsls	r3, r3, #6
 800059e:	b25a      	sxtb	r2, r3
 80005a0:	7afb      	ldrb	r3, [r7, #11]
 80005a2:	011b      	lsls	r3, r3, #4
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b25a      	sxtb	r2, r3
 80005aa:	7b3b      	ldrb	r3, [r7, #12]
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	b25b      	sxtb	r3, r3
 80005b0:	4313      	orrs	r3, r2
 80005b2:	b25a      	sxtb	r2, r3
 80005b4:	7b7b      	ldrb	r3, [r7, #13]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b25a      	sxtb	r2, r3
 80005be:	7bbb      	ldrb	r3, [r7, #14]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	767b      	strb	r3, [r7, #25]
  Control_Latch[2]= (settings.mux_out<<5) | (settings.counter_operation<<4) | (settings.core_power_level<<2);
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	015b      	lsls	r3, r3, #5
 80005ce:	b25a      	sxtb	r2, r3
 80005d0:	7c3b      	ldrb	r3, [r7, #16]
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b25a      	sxtb	r2, r3
 80005da:	7c7b      	ldrb	r3, [r7, #17]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	76bb      	strb	r3, [r7, #26]
  //N counter Latch

  Ncounter_Latch[0]= (settings.charge_pump_output<<5) | (uint8_t)(settings.B_div >>8);
 80005e8:	7b7b      	ldrb	r3, [r7, #13]
 80005ea:	015b      	lsls	r3, r3, #5
 80005ec:	b25a      	sxtb	r2, r3
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	0a1b      	lsrs	r3, r3, #8
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	753b      	strb	r3, [r7, #20]
  Ncounter_Latch[1]= (uint8_t)settings.B_div;
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	757b      	strb	r3, [r7, #21]
  Ncounter_Latch[2]= (uint8_t)(settings.A_div<<2) | 0x02; ;
 8000604:	7a3b      	ldrb	r3, [r7, #8]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	b2db      	uxtb	r3, r3
 8000610:	75bb      	strb	r3, [r7, #22]




  // Заполняем регистры ADF4360
  HAL_GPIO_WritePin(ADF4360_LE_GPIO_Port, ADF4360_LE_Pin, GPIO_PIN_RESET); // LE on
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	481e      	ldr	r0, [pc, #120]	; (8000690 <main+0x1d0>)
 8000618:	f000 fe3c 	bl	8001294 <HAL_GPIO_WritePin>
  // Отправляем по SPI R counter Latch
  HAL_SPI_Transmit(&hspi2,Rcounter_Latch,3,100);
 800061c:	f107 011c 	add.w	r1, r7, #28
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	2203      	movs	r2, #3
 8000624:	481b      	ldr	r0, [pc, #108]	; (8000694 <main+0x1d4>)
 8000626:	f002 fa30 	bl	8002a8a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ADF4360_LE_GPIO_Port, ADF4360_LE_Pin, GPIO_PIN_SET); // LE off
 800062a:	2201      	movs	r2, #1
 800062c:	2101      	movs	r1, #1
 800062e:	4818      	ldr	r0, [pc, #96]	; (8000690 <main+0x1d0>)
 8000630:	f000 fe30 	bl	8001294 <HAL_GPIO_WritePin>
  HAL_Delay(15);
 8000634:	200f      	movs	r0, #15
 8000636:	f000 fb79 	bl	8000d2c <HAL_Delay>


  HAL_GPIO_WritePin(ADF4360_LE_GPIO_Port, ADF4360_LE_Pin, GPIO_PIN_RESET); // LE on
 800063a:	2200      	movs	r2, #0
 800063c:	2101      	movs	r1, #1
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0x1d0>)
 8000640:	f000 fe28 	bl	8001294 <HAL_GPIO_WritePin>
  // Отправляем по SPI Control Latch
  HAL_SPI_Transmit(&hspi2,Control_Latch,3,100);
 8000644:	f107 0118 	add.w	r1, r7, #24
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	2203      	movs	r2, #3
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <main+0x1d4>)
 800064e:	f002 fa1c 	bl	8002a8a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ADF4360_LE_GPIO_Port, ADF4360_LE_Pin, GPIO_PIN_SET); // LE off
 8000652:	2201      	movs	r2, #1
 8000654:	2101      	movs	r1, #1
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <main+0x1d0>)
 8000658:	f000 fe1c 	bl	8001294 <HAL_GPIO_WritePin>
  HAL_Delay(15);
 800065c:	200f      	movs	r0, #15
 800065e:	f000 fb65 	bl	8000d2c <HAL_Delay>


  HAL_GPIO_WritePin(ADF4360_LE_GPIO_Port, ADF4360_LE_Pin, GPIO_PIN_RESET); // LE on
 8000662:	2200      	movs	r2, #0
 8000664:	2101      	movs	r1, #1
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <main+0x1d0>)
 8000668:	f000 fe14 	bl	8001294 <HAL_GPIO_WritePin>
  // Отправляем по SPI N counter Latch
  HAL_SPI_Transmit(&hspi2,Ncounter_Latch,3,100);
 800066c:	f107 0114 	add.w	r1, r7, #20
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	2203      	movs	r2, #3
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0x1d4>)
 8000676:	f002 fa08 	bl	8002a8a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ADF4360_LE_GPIO_Port, ADF4360_LE_Pin, GPIO_PIN_SET); // LE off
 800067a:	2201      	movs	r2, #1
 800067c:	2101      	movs	r1, #1
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <main+0x1d0>)
 8000680:	f000 fe08 	bl	8001294 <HAL_GPIO_WritePin>
  HAL_Delay(15);
 8000684:	200f      	movs	r0, #15
 8000686:	f000 fb51 	bl	8000d2c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x1ca>
 800068c:	08003904 	.word	0x08003904
 8000690:	48000800 	.word	0x48000800
 8000694:	20000028 	.word	0x20000028

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b8      	sub	sp, #224	; 0xe0
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f918 	bl	80038dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2288      	movs	r2, #136	; 0x88
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f90a 	bl	80038dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	2310      	movs	r3, #16
 80006d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ee:	230a      	movs	r3, #10
 80006f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fe3e 	bl	800138c <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000716:	f000 f935 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fa0a 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800074a:	f000 f91b 	bl	8000984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800074e:	2302      	movs	r3, #2
 8000750:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000752:	2300      	movs	r3, #0
 8000754:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fc37 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000764:	f000 f90e 	bl	8000984 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_4);
 8000768:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800076c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000770:	2000      	movs	r0, #0
 8000772:	f001 fad3 	bl	8001d1c <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000776:	f44f 7000 	mov.w	r0, #512	; 0x200
 800077a:	f000 fdb1 	bl	80012e0 <HAL_PWREx_ControlVoltageScaling>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000784:	f000 f8fe 	bl	8000984 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	37e0      	adds	r7, #224	; 0xe0
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_SPI2_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_SPI2_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_SPI2_Init+0x74>)
 800079c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_SPI2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI2_Init+0x74>)
 80007aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_SPI2_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI2_Init+0x74>)
 80007be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI2_Init+0x74>)
 80007c6:	2238      	movs	r2, #56	; 0x38
 80007c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_SPI2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI2_Init+0x74>)
 80007de:	2207      	movs	r2, #7
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_SPI2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI2_Init+0x74>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_SPI2_Init+0x74>)
 80007f0:	f002 f8a8 	bl	8002944 <HAL_SPI_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f8c3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000028 	.word	0x20000028
 8000808:	40003800 	.word	0x40003800

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART2_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000850:	f002 fbe6 	bl	8003020 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f893 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000008c 	.word	0x2000008c
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <MX_GPIO_Init+0x10c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a3c      	ldr	r2, [pc, #240]	; (8000978 <MX_GPIO_Init+0x10c>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <MX_GPIO_Init+0x10c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_GPIO_Init+0x10c>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a36      	ldr	r2, [pc, #216]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b31      	ldr	r3, [pc, #196]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a30      	ldr	r2, [pc, #192]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a2a      	ldr	r2, [pc, #168]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADF4360_LE_GPIO_Port, ADF4360_LE_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2101      	movs	r1, #1
 80008e6:	4825      	ldr	r0, [pc, #148]	; (800097c <MX_GPIO_Init+0x110>)
 80008e8:	f000 fcd4 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2120      	movs	r1, #32
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f000 fcce 	bl	8001294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0x114>)
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x110>)
 800090e:	f000 fb17 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADF4360_LE_Pin */
  GPIO_InitStruct.Pin = ADF4360_LE_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADF4360_LE_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4814      	ldr	r0, [pc, #80]	; (800097c <MX_GPIO_Init+0x110>)
 800092a:	f000 fb09 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800092e:	2320      	movs	r3, #32
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fafa 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800094c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fae8 	bl	8000f40 <HAL_GPIO_Init>

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	48000800 	.word	0x48000800
 8000980:	10210000 	.word	0x10210000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_MspInit+0x44>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x44>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x44>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x44>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a25      	ldr	r2, [pc, #148]	; (8000a8c <HAL_SPI_MspInit+0xb4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d144      	bne.n	8000a84 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a24      	ldr	r2, [pc, #144]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_SPI_MspInit+0xb8>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a42:	2308      	movs	r3, #8
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a52:	2305      	movs	r3, #5
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <HAL_SPI_MspInit+0xbc>)
 8000a5e:	f000 fa6f 	bl	8000f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a74:	2305      	movs	r3, #5
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <HAL_SPI_MspInit+0xc0>)
 8000a80:	f000 fa5e 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40003800 	.word	0x40003800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000800 	.word	0x48000800
 8000a98:	48000400 	.word	0x48000400

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_UART_MspInit+0x7c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d128      	bne.n	8000b10 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x80>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_UART_MspInit+0x80>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0x80>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x80>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0x80>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x80>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f000 fa18 	bl	8000f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40021000 	.word	0x40021000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f8be 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <SystemInit+0x64>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <SystemInit+0x64>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <SystemInit+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <SystemInit+0x68>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <SystemInit+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <SystemInit+0x68>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <SystemInit+0x68>)
 8000ba0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ba4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ba8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <SystemInit+0x68>)
 8000bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <SystemInit+0x68>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <SystemInit+0x68>)
 8000bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <SystemInit+0x68>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SystemInit+0x64>)
 8000bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bca:	609a      	str	r2, [r3, #8]
#endif
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00
 8000bdc:	40021000 	.word	0x40021000

08000be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be4:	f7ff ffc6 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000be8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bea:	e003      	b.n	8000bf4 <LoopCopyDataInit>

08000bec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bf0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bf2:	3104      	adds	r1, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bf8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bfc:	d3f6      	bcc.n	8000bec <CopyDataInit>
	ldr	r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c00:	e002      	b.n	8000c08 <LoopFillZerobss>

08000c02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c04:	f842 3b04 	str.w	r3, [r2], #4

08000c08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LoopForever+0x16>)
	cmp	r2, r3
 8000c0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c0c:	d3f9      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 fe41 	bl	8003894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c12:	f7ff fc55 	bl	80004c0 <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c1c:	08003960 	.word	0x08003960
	ldr	r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c24:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c28:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c2c:	20000110 	.word	0x20000110

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_Init+0x3c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_Init+0x3c>)
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f000 f944 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 f80f 	bl	8000c74 <HAL_InitTick>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	e001      	b.n	8000c66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c62:	f7ff fe95 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_InitTick+0x6c>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d023      	beq.n	8000cd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_InitTick+0x70>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_InitTick+0x6c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f941 	bl	8000f26 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10f      	bne.n	8000cca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d809      	bhi.n	8000cc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb8:	f000 f919 	bl	8000eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_InitTick+0x74>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e007      	b.n	8000cd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
 8000cc8:	e004      	b.n	8000cd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e001      	b.n	8000cd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	2000010c 	.word	0x2000010c

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	2000010c 	.word	0x2000010c

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff47 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff5c 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb0 	bl	8000e94 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e17f      	b.n	8001250 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8171 	beq.w	800124a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d00b      	beq.n	8000f88 <HAL_GPIO_Init+0x48>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d007      	beq.n	8000f88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7c:	2b11      	cmp	r3, #17
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b12      	cmp	r3, #18
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d118      	bne.n	8001028 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x128>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b12      	cmp	r3, #18
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	6939      	ldr	r1, [r7, #16]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80ac 	beq.w	800124a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b5f      	ldr	r3, [pc, #380]	; (8001270 <HAL_GPIO_Init+0x330>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a5e      	ldr	r2, [pc, #376]	; (8001270 <HAL_GPIO_Init+0x330>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b5c      	ldr	r3, [pc, #368]	; (8001270 <HAL_GPIO_Init+0x330>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800110a:	4a5a      	ldr	r2, [pc, #360]	; (8001274 <HAL_GPIO_Init+0x334>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x242>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <HAL_GPIO_Init+0x338>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x23e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4e      	ldr	r2, [pc, #312]	; (800127c <HAL_GPIO_Init+0x33c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x23a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4d      	ldr	r2, [pc, #308]	; (8001280 <HAL_GPIO_Init+0x340>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x236>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4c      	ldr	r2, [pc, #304]	; (8001284 <HAL_GPIO_Init+0x344>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x232>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4b      	ldr	r2, [pc, #300]	; (8001288 <HAL_GPIO_Init+0x348>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x22e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4a      	ldr	r2, [pc, #296]	; (800128c <HAL_GPIO_Init+0x34c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x22a>
 8001166:	2306      	movs	r3, #6
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800116a:	2307      	movs	r3, #7
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x244>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x244>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x244>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x244>
 8001182:	2300      	movs	r3, #0
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001194:	4937      	ldr	r1, [pc, #220]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011a2:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_GPIO_Init+0x350>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4a32      	ldr	r2, [pc, #200]	; (8001290 <HAL_GPIO_Init+0x350>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011cc:	4b30      	ldr	r3, [pc, #192]	; (8001290 <HAL_GPIO_Init+0x350>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <HAL_GPIO_Init+0x350>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_GPIO_Init+0x350>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800121a:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_GPIO_Init+0x350>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_GPIO_Init+0x350>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <HAL_GPIO_Init+0x350>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f ae78 	bne.w	8000f50 <HAL_GPIO_Init+0x10>
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000
 8001278:	48000400 	.word	0x48000400
 800127c:	48000800 	.word	0x48000800
 8001280:	48000c00 	.word	0x48000c00
 8001284:	48001000 	.word	0x48001000
 8001288:	48001400 	.word	0x48001400
 800128c:	48001800 	.word	0x48001800
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a4:	787b      	ldrb	r3, [r7, #1]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000

080012e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ee:	d130      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fc:	d038      	beq.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001306:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2232      	movs	r2, #50	; 0x32
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0c9b      	lsrs	r3, r3, #18
 8001320:	3301      	adds	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001324:	e002      	b.n	800132c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3b01      	subs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001338:	d102      	bne.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x60>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f2      	bne.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134c:	d110      	bne.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e00f      	b.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135e:	d007      	beq.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40007000 	.word	0x40007000
 8001384:	20000000 	.word	0x20000000
 8001388:	431bde83 	.word	0x431bde83

0800138c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e3d4      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139e:	4ba1      	ldr	r3, [pc, #644]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a8:	4b9e      	ldr	r3, [pc, #632]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80e4 	beq.w	8001588 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4a>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	f040 808b 	bne.w	80014e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	f040 8087 	bne.w	80014e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d6:	4b93      	ldr	r3, [pc, #588]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_RCC_OscConfig+0x62>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e3ac      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_RCC_OscConfig+0x7c>
 80013fe:	4b89      	ldr	r3, [pc, #548]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001406:	e005      	b.n	8001414 <HAL_RCC_OscConfig+0x88>
 8001408:	4b86      	ldr	r3, [pc, #536]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800140a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001414:	4293      	cmp	r3, r2
 8001416:	d223      	bcs.n	8001460 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fd75 	bl	8001f0c <RCC_SetFlashLatencyFromMSIRange>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e38d      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142c:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a7c      	ldr	r2, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4977      	ldr	r1, [pc, #476]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144a:	4b76      	ldr	r3, [pc, #472]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4972      	ldr	r1, [pc, #456]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800145a:	4313      	orrs	r3, r2
 800145c:	604b      	str	r3, [r1, #4]
 800145e:	e025      	b.n	80014ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a6f      	ldr	r2, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	496a      	ldr	r1, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800147e:	4b69      	ldr	r3, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	4965      	ldr	r1, [pc, #404]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fd35 	bl	8001f0c <RCC_SetFlashLatencyFromMSIRange>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e34d      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014ac:	f000 fc6a 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	495a      	ldr	r1, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x29c>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_RCC_OscConfig+0x2a0>)
 80014ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014cc:	4b58      	ldr	r3, [pc, #352]	; (8001630 <HAL_RCC_OscConfig+0x2a4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fbcf 	bl	8000c74 <HAL_InitTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d052      	beq.n	8001586 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	e331      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d032      	beq.n	8001552 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ec:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc0c 	bl	8000d14 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001500:	f7ff fc08 	bl	8000d14 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e31a      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001512:	4b44      	ldr	r3, [pc, #272]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a40      	ldr	r2, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	493b      	ldr	r1, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	4936      	ldr	r1, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
 8001550:	e01a      	b.n	8001588 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a33      	ldr	r2, [pc, #204]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800155e:	f7ff fbd9 	bl	8000d14 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001566:	f7ff fbd5 	bl	8000d14 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e2e7      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x1da>
 8001584:	e000      	b.n	8001588 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001586:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d074      	beq.n	800167e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b08      	cmp	r3, #8
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x21a>
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	d10e      	bne.n	80015be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d10b      	bne.n	80015be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d064      	beq.n	800167c <HAL_RCC_OscConfig+0x2f0>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d160      	bne.n	800167c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e2c4      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x24a>
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a15      	ldr	r2, [pc, #84]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e01d      	b.n	8001612 <HAL_RCC_OscConfig+0x286>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x26e>
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x286>
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x298>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01c      	beq.n	8001654 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fb7b 	bl	8000d14 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001620:	e011      	b.n	8001646 <HAL_RCC_OscConfig+0x2ba>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	08003908 	.word	0x08003908
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fb6e 	bl	8000d14 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e280      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001646:	4baf      	ldr	r3, [pc, #700]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x2a8>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fb5e 	bl	8000d14 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fb5a 	bl	8000d14 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e26c      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166e:	4ba5      	ldr	r3, [pc, #660]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x2d0>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d060      	beq.n	800174c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d005      	beq.n	800169c <HAL_RCC_OscConfig+0x310>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d119      	bne.n	80016ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d116      	bne.n	80016ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800169c:	4b99      	ldr	r3, [pc, #612]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x328>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e249      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b93      	ldr	r3, [pc, #588]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	061b      	lsls	r3, r3, #24
 80016c2:	4990      	ldr	r1, [pc, #576]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	e040      	b.n	800174c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d023      	beq.n	800171a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d2:	4b8c      	ldr	r3, [pc, #560]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a8b      	ldr	r2, [pc, #556]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fb19 	bl	8000d14 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb15 	bl	8000d14 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e227      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f8:	4b82      	ldr	r3, [pc, #520]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b7f      	ldr	r3, [pc, #508]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	497c      	ldr	r1, [pc, #496]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e018      	b.n	800174c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171a:	4b7a      	ldr	r3, [pc, #488]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a79      	ldr	r2, [pc, #484]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff faf5 	bl	8000d14 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff faf1 	bl	8000d14 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e203      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001740:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d03c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01c      	beq.n	800179a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	4a67      	ldr	r2, [pc, #412]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff fad0 	bl	8000d14 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff facc 	bl	8000d14 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1de      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178a:	4b5e      	ldr	r3, [pc, #376]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ef      	beq.n	8001778 <HAL_RCC_OscConfig+0x3ec>
 8001798:	e01b      	b.n	80017d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179a:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 800179c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a0:	4a58      	ldr	r2, [pc, #352]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fab3 	bl	8000d14 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff faaf 	bl	8000d14 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1c1      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c4:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ef      	bne.n	80017b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80a6 	beq.w	800192c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017e4:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10d      	bne.n	800180c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	4a43      	ldr	r2, [pc, #268]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80017f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fa:	6593      	str	r3, [r2, #88]	; 0x58
 80017fc:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001808:	2301      	movs	r3, #1
 800180a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180c:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_RCC_OscConfig+0x57c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d118      	bne.n	800184a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_RCC_OscConfig+0x57c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a3a      	ldr	r2, [pc, #232]	; (8001908 <HAL_RCC_OscConfig+0x57c>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001824:	f7ff fa76 	bl	8000d14 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182c:	f7ff fa72 	bl	8000d14 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e184      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_RCC_OscConfig+0x57c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d108      	bne.n	8001864 <HAL_RCC_OscConfig+0x4d8>
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001858:	4a2a      	ldr	r2, [pc, #168]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001862:	e024      	b.n	80018ae <HAL_RCC_OscConfig+0x522>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d110      	bne.n	800188e <HAL_RCC_OscConfig+0x502>
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 800187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188c:	e00f      	b.n	80018ae <HAL_RCC_OscConfig+0x522>
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80018a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80018a6:	f023 0304 	bic.w	r3, r3, #4
 80018aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d016      	beq.n	80018e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff fa2d 	bl	8000d14 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fa29 	bl	8000d14 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e139      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x578>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0ed      	beq.n	80018be <HAL_RCC_OscConfig+0x532>
 80018e2:	e01a      	b.n	800191a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fa16 	bl	8000d14 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ea:	e00f      	b.n	800190c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fa12 	bl	8000d14 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d906      	bls.n	800190c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e122      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190c:	4b90      	ldr	r3, [pc, #576]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1e8      	bne.n	80018ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191a:	7ffb      	ldrb	r3, [r7, #31]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001920:	4b8b      	ldr	r3, [pc, #556]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 8108 	beq.w	8001b46 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	2b02      	cmp	r3, #2
 800193c:	f040 80d0 	bne.w	8001ae0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001940:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0203 	and.w	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	429a      	cmp	r2, r3
 8001952:	d130      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	3b01      	subs	r3, #1
 8001960:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d127      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001970:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d11f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001980:	2a07      	cmp	r2, #7
 8001982:	bf14      	ite	ne
 8001984:	2201      	movne	r2, #1
 8001986:	2200      	moveq	r2, #0
 8001988:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800198a:	4293      	cmp	r3, r2
 800198c:	d113      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	085b      	lsrs	r3, r3, #1
 800199a:	3b01      	subs	r3, #1
 800199c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d109      	bne.n	80019b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d06e      	beq.n	8001a94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d069      	beq.n	8001a90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019bc:	4b64      	ldr	r3, [pc, #400]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019c8:	4b61      	ldr	r3, [pc, #388]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b7      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019d8:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a5c      	ldr	r2, [pc, #368]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 80019de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e4:	f7ff f996 	bl	8000d14 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f992 	bl	8000d14 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e0a4      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fe:	4b54      	ldr	r3, [pc, #336]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0a:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	4b51      	ldr	r3, [pc, #324]	; (8001b54 <HAL_RCC_OscConfig+0x7c8>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a1a:	3a01      	subs	r2, #1
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a24:	0212      	lsls	r2, r2, #8
 8001a26:	4311      	orrs	r1, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a2c:	0852      	lsrs	r2, r2, #1
 8001a2e:	3a01      	subs	r2, #1
 8001a30:	0552      	lsls	r2, r2, #21
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a38:	0852      	lsrs	r2, r2, #1
 8001a3a:	3a01      	subs	r2, #1
 8001a3c:	0652      	lsls	r2, r2, #25
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a44:	0912      	lsrs	r2, r2, #4
 8001a46:	0452      	lsls	r2, r2, #17
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4941      	ldr	r1, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3e      	ldr	r2, [pc, #248]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a5c:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a68:	f7ff f954 	bl	8000d14 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f950 	bl	8000d14 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e062      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8e:	e05a      	b.n	8001b46 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e059      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d152      	bne.n	8001b46 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a2a      	ldr	r2, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab8:	f7ff f92c 	bl	8000d14 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f928 	bl	8000d14 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e03a      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x734>
 8001ade:	e032      	b.n	8001b46 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d02d      	beq.n	8001b42 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001b04:	f023 0303 	bic.w	r3, r3, #3
 8001b08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001b10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f8fb 	bl	8000d14 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f8f7 	bl	8000d14 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e009      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_RCC_OscConfig+0x7c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x796>
 8001b40:	e001      	b.n	8001b46 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	f99d808c 	.word	0xf99d808c

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0c8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d910      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 0207 	bic.w	r2, r3, #7
 8001b82:	4961      	ldr	r1, [pc, #388]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0b0      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d04c      	beq.n	8001c42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb0:	4b56      	ldr	r3, [pc, #344]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d121      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e09e      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d115      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e092      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be0:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e086      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf0:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e07e      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c00:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 0203 	bic.w	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	493f      	ldr	r1, [pc, #252]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c12:	f7ff f87f 	bl	8000d14 <HAL_GetTick>
 8001c16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7ff f87b 	bl	8000d14 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e066      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 020c 	and.w	r2, r3, #12
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d1eb      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	492c      	ldr	r1, [pc, #176]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b29      	ldr	r3, [pc, #164]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d210      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0207 	bic.w	r2, r3, #7
 8001c76:	4924      	ldr	r1, [pc, #144]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_RCC_ClockConfig+0x1b0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e036      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4918      	ldr	r1, [pc, #96]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4910      	ldr	r1, [pc, #64]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cce:	f000 f859 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_RCC_ClockConfig+0x1b4>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	490c      	ldr	r1, [pc, #48]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	5ccb      	ldrb	r3, [r1, r3]
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe ffbe 	bl	8000c74 <HAL_InitTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	08003908 	.word	0x08003908
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_RCC_MCOConfig+0x64>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <HAL_RCC_MCOConfig+0x64>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_MCOConfig+0x64>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8001d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f7ff f8ee 	bl	8000f40 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_RCC_MCOConfig+0x64>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	4903      	ldr	r1, [pc, #12]	; (8001d80 <HAL_RCC_MCOConfig+0x64>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d121      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d11e      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001de0:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d102      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	e004      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d134      	bne.n	8001e7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d003      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0xac>
 8001e28:	e005      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e2c:	617b      	str	r3, [r7, #20]
      break;
 8001e2e:	e005      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e32:	617b      	str	r3, [r7, #20]
      break;
 8001e34:	e002      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	617b      	str	r3, [r7, #20]
      break;
 8001e3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	3301      	adds	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	fb02 f203 	mul.w	r2, r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	0e5b      	lsrs	r3, r3, #25
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08003920 	.word	0x08003920
 8001e94:	00f42400 	.word	0x00f42400
 8001e98:	007a1200 	.word	0x007a1200

08001e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4904      	ldr	r1, [pc, #16]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08003918 	.word	0x08003918

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee4:	f7ff ffda 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0adb      	lsrs	r3, r3, #11
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4904      	ldr	r1, [pc, #16]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08003918 	.word	0x08003918

08001f0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f24:	f7ff f9ce 	bl	80012c4 <HAL_PWREx_GetVoltageRange>
 8001f28:	6178      	str	r0, [r7, #20]
 8001f2a:	e014      	b.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	6593      	str	r3, [r2, #88]	; 0x58
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f44:	f7ff f9be 	bl	80012c4 <HAL_PWREx_GetVoltageRange>
 8001f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5c:	d10b      	bne.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d919      	bls.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2ba0      	cmp	r3, #160	; 0xa0
 8001f68:	d902      	bls.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e013      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	e010      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d902      	bls.n	8001f82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	e00a      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d102      	bne.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f88:	2302      	movs	r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	e004      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b70      	cmp	r3, #112	; 0x70
 8001f92:	d101      	bne.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 0207 	bic.w	r2, r3, #7
 8001fa0:	4909      	ldr	r1, [pc, #36]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d041      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ff0:	d02a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ff2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ff6:	d824      	bhi.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ff8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ffc:	d008      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ffe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002002:	d81e      	bhi.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800200c:	d010      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800200e:	e018      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002010:	4b86      	ldr	r3, [pc, #536]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a85      	ldr	r2, [pc, #532]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800201c:	e015      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fabb 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 800202a:	4603      	mov	r3, r0
 800202c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800202e:	e00c      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3320      	adds	r3, #32
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fba6 	bl	8002788 <RCCEx_PLLSAI2_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002040:	e003      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	74fb      	strb	r3, [r7, #19]
      break;
 8002046:	e000      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10b      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002050:	4b76      	ldr	r3, [pc, #472]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205e:	4973      	ldr	r1, [pc, #460]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002066:	e001      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d041      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800207c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002080:	d02a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002082:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002086:	d824      	bhi.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800208c:	d008      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800208e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002092:	d81e      	bhi.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d010      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800209e:	e018      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020a0:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a61      	ldr	r2, [pc, #388]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ac:	e015      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fa73 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80020ba:	4603      	mov	r3, r0
 80020bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020be:	e00c      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3320      	adds	r3, #32
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fb5e 	bl	8002788 <RCCEx_PLLSAI2_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d0:	e003      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	74fb      	strb	r3, [r7, #19]
      break;
 80020d6:	e000      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020e0:	4b52      	ldr	r3, [pc, #328]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ee:	494f      	ldr	r1, [pc, #316]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020f6:	e001      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a0 	beq.w	800224a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800211e:	2300      	movs	r3, #0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00d      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a40      	ldr	r2, [pc, #256]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213c:	2301      	movs	r3, #1
 800213e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3a      	ldr	r2, [pc, #232]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800214c:	f7fe fde2 	bl	8000d14 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002152:	e009      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002154:	f7fe fdde 	bl	8000d14 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d902      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	74fb      	strb	r3, [r7, #19]
        break;
 8002166:	e005      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ef      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d15c      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002184:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01f      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	d019      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	4a20      	ldr	r2, [pc, #128]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe fd9d 	bl	8000d14 <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021dc:	e00b      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fd99 	bl	8000d14 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d902      	bls.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	74fb      	strb	r3, [r7, #19]
            break;
 80021f4:	e006      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ec      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221a:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002222:	e009      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
 8002228:	e006      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002238:	7c7b      	ldrb	r3, [r7, #17]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b9e      	ldr	r3, [pc, #632]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a9d      	ldr	r2, [pc, #628]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002256:	4b98      	ldr	r3, [pc, #608]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225c:	f023 0203 	bic.w	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	4994      	ldr	r1, [pc, #592]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00a      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 020c 	bic.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	498c      	ldr	r1, [pc, #560]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229a:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	4983      	ldr	r1, [pc, #524]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022bc:	4b7e      	ldr	r3, [pc, #504]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	497b      	ldr	r1, [pc, #492]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022de:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ec:	4972      	ldr	r1, [pc, #456]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002300:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	496a      	ldr	r1, [pc, #424]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	4961      	ldr	r1, [pc, #388]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002344:	4b5c      	ldr	r3, [pc, #368]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	4959      	ldr	r1, [pc, #356]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002374:	4950      	ldr	r1, [pc, #320]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002388:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	4948      	ldr	r1, [pc, #288]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023aa:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	493f      	ldr	r1, [pc, #252]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d028      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023da:	4937      	ldr	r1, [pc, #220]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ea:	d106      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]
 80023f8:	e011      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002402:	d10c      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	2101      	movs	r1, #1
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f8c8 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d028      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	491f      	ldr	r1, [pc, #124]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002448:	d106      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002454:	60d3      	str	r3, [r2, #12]
 8002456:	e011      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f899 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02b      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024a6:	d109      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a02      	ldr	r2, [pc, #8]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b2:	60d3      	str	r3, [r2, #12]
 80024b4:	e014      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f867 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d6:	7cfb      	ldrb	r3, [r7, #19]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d02f      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fa:	4928      	ldr	r1, [pc, #160]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800250a:	d10d      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3304      	adds	r3, #4
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f844 	bl	80025a0 <RCCEx_PLLSAI1_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d014      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	74bb      	strb	r3, [r7, #18]
 8002526:	e011      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800252c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002530:	d10c      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3320      	adds	r3, #32
 8002536:	2102      	movs	r1, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f925 	bl	8002788 <RCCEx_PLLSAI2_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002566:	490d      	ldr	r1, [pc, #52]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800258a:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002592:	7cbb      	ldrb	r3, [r7, #18]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000

080025a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ae:	4b75      	ldr	r3, [pc, #468]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d10d      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
       ||
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025d2:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
       ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d047      	beq.n	8002676 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e044      	b.n	8002676 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d018      	beq.n	8002626 <RCCEx_PLLSAI1_Config+0x86>
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d825      	bhi.n	8002644 <RCCEx_PLLSAI1_Config+0xa4>
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d002      	beq.n	8002602 <RCCEx_PLLSAI1_Config+0x62>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d009      	beq.n	8002614 <RCCEx_PLLSAI1_Config+0x74>
 8002600:	e020      	b.n	8002644 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002602:	4b60      	ldr	r3, [pc, #384]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11d      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002612:	e01a      	b.n	800264a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002614:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e013      	b.n	800264e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002626:	4b57      	ldr	r3, [pc, #348]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002632:	4b54      	ldr	r3, [pc, #336]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002642:	e006      	b.n	8002652 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e004      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e002      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002652:	bf00      	nop
    }

    if(status == HAL_OK)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	430b      	orrs	r3, r1
 8002670:	4944      	ldr	r1, [pc, #272]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d17d      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a40      	ldr	r2, [pc, #256]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002688:	f7fe fb44 	bl	8000d14 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268e:	e009      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002690:	f7fe fb40 	bl	8000d14 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	73fb      	strb	r3, [r7, #15]
        break;
 80026a2:	e005      	b.n	80026b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ef      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d160      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	0912      	lsrs	r2, r2, #4
 80026d4:	0452      	lsls	r2, r2, #17
 80026d6:	430a      	orrs	r2, r1
 80026d8:	492a      	ldr	r1, [pc, #168]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	610b      	str	r3, [r1, #16]
 80026de:	e027      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d112      	bne.n	800270c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	0211      	lsls	r1, r2, #8
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6912      	ldr	r2, [r2, #16]
 80026fc:	0852      	lsrs	r2, r2, #1
 80026fe:	3a01      	subs	r2, #1
 8002700:	0552      	lsls	r2, r2, #21
 8002702:	430a      	orrs	r2, r1
 8002704:	491f      	ldr	r1, [pc, #124]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	610b      	str	r3, [r1, #16]
 800270a:	e011      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002714:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	0211      	lsls	r1, r2, #8
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6952      	ldr	r2, [r2, #20]
 8002722:	0852      	lsrs	r2, r2, #1
 8002724:	3a01      	subs	r2, #1
 8002726:	0652      	lsls	r2, r2, #25
 8002728:	430a      	orrs	r2, r1
 800272a:	4916      	ldr	r1, [pc, #88]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a13      	ldr	r2, [pc, #76]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe faea 	bl	8000d14 <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002742:	e009      	b.n	8002758 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002744:	f7fe fae6 	bl	8000d14 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	73fb      	strb	r3, [r7, #15]
          break;
 8002756:	e005      	b.n	8002764 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4904      	ldr	r1, [pc, #16]	; (8002784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000

08002788 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002796:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d018      	beq.n	80027d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0203 	and.w	r2, r3, #3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d10d      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
       ||
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
       ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d047      	beq.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e044      	b.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d018      	beq.n	800280e <RCCEx_PLLSAI2_Config+0x86>
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d825      	bhi.n	800282c <RCCEx_PLLSAI2_Config+0xa4>
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d002      	beq.n	80027ea <RCCEx_PLLSAI2_Config+0x62>
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d009      	beq.n	80027fc <RCCEx_PLLSAI2_Config+0x74>
 80027e8:	e020      	b.n	800282c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ea:	4b55      	ldr	r3, [pc, #340]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11d      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fa:	e01a      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027fc:	4b50      	ldr	r3, [pc, #320]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d116      	bne.n	8002836 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280c:	e013      	b.n	8002836 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800282a:	e006      	b.n	800283a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      break;
 8002830:	e004      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002832:	bf00      	nop
 8002834:	e002      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800283a:	bf00      	nop
    }

    if(status == HAL_OK)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002842:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	430b      	orrs	r3, r1
 8002858:	4939      	ldr	r1, [pc, #228]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d167      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002864:	4b36      	ldr	r3, [pc, #216]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a35      	ldr	r2, [pc, #212]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fa50 	bl	8000d14 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002876:	e009      	b.n	800288c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002878:	f7fe fa4c 	bl	8000d14 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d902      	bls.n	800288c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	73fb      	strb	r3, [r7, #15]
        break;
 800288a:	e005      	b.n	8002898 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800288c:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ef      	bne.n	8002878 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d14a      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d111      	bne.n	80028c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6892      	ldr	r2, [r2, #8]
 80028b4:	0211      	lsls	r1, r2, #8
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	0912      	lsrs	r2, r2, #4
 80028bc:	0452      	lsls	r2, r2, #17
 80028be:	430a      	orrs	r2, r1
 80028c0:	491f      	ldr	r1, [pc, #124]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	614b      	str	r3, [r1, #20]
 80028c6:	e011      	b.n	80028ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6912      	ldr	r2, [r2, #16]
 80028de:	0852      	lsrs	r2, r2, #1
 80028e0:	3a01      	subs	r2, #1
 80028e2:	0652      	lsls	r2, r2, #25
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4916      	ldr	r1, [pc, #88]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a13      	ldr	r2, [pc, #76]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fa0c 	bl	8000d14 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028fe:	e009      	b.n	8002914 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002900:	f7fe fa08 	bl	8000d14 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	73fb      	strb	r3, [r7, #15]
          break;
 8002912:	e005      	b.n	8002920 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002930:	4313      	orrs	r3, r2
 8002932:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e095      	b.n	8002a82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d108      	bne.n	8002970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002966:	d009      	beq.n	800297c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
 800296e:	e005      	b.n	800297c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f81e 	bl	80009d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029bc:	d902      	bls.n	80029c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e002      	b.n	80029ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029d2:	d007      	beq.n	80029e4 <HAL_SPI_Init+0xa0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029dc:	d002      	beq.n	80029e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	ea42 0103 	orr.w	r1, r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	f003 0204 	and.w	r2, r3, #4
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a60:	ea42 0103 	orr.w	r1, r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_SPI_Transmit+0x22>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e158      	b.n	8002d5e <HAL_SPI_Transmit+0x2d4>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab4:	f7fe f92e 	bl	8000d14 <HAL_GetTick>
 8002ab8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ace:	e13d      	b.n	8002d4c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_Transmit+0x52>
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ae0:	e134      	b.n	8002d4c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2c:	d10f      	bne.n	8002b4e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d007      	beq.n	8002b6c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b74:	d94b      	bls.n	8002c0e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_SPI_Transmit+0xfa>
 8002b7e:	8afb      	ldrh	r3, [r7, #22]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d13e      	bne.n	8002c02 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	1c9a      	adds	r2, r3, #2
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ba8:	e02b      	b.n	8002c02 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d112      	bne.n	8002bde <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	881a      	ldrh	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	1c9a      	adds	r2, r3, #2
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bdc:	e011      	b.n	8002c02 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bde:	f7fe f899 	bl	8000d14 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d803      	bhi.n	8002bf6 <HAL_SPI_Transmit+0x16c>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf4:	d102      	bne.n	8002bfc <HAL_SPI_Transmit+0x172>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c00:	e0a4      	b.n	8002d4c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1ce      	bne.n	8002baa <HAL_SPI_Transmit+0x120>
 8002c0c:	e07c      	b.n	8002d08 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_SPI_Transmit+0x192>
 8002c16:	8afb      	ldrh	r3, [r7, #22]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d170      	bne.n	8002cfe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d912      	bls.n	8002c4c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b02      	subs	r3, #2
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c4a:	e058      	b.n	8002cfe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c72:	e044      	b.n	8002cfe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d12b      	bne.n	8002cda <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d912      	bls.n	8002cb2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b02      	subs	r3, #2
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cb0:	e025      	b.n	8002cfe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	330c      	adds	r3, #12
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cd8:	e011      	b.n	8002cfe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cda:	f7fe f81b 	bl	8000d14 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d803      	bhi.n	8002cf2 <HAL_SPI_Transmit+0x268>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Transmit+0x26e>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cfc:	e026      	b.n	8002d4c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1b5      	bne.n	8002c74 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	6839      	ldr	r1, [r7, #0]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f941 	bl	8002f94 <SPI_EndRxTxTransaction>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e000      	b.n	8002d4c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d78:	f7fd ffcc 	bl	8000d14 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d88:	f7fd ffc4 	bl	8000d14 <HAL_GetTick>
 8002d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	0d1b      	lsrs	r3, r3, #20
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d9e:	e054      	b.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da6:	d050      	beq.n	8002e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002da8:	f7fd ffb4 	bl	8000d14 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d902      	bls.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d13d      	bne.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dd6:	d111      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de0:	d004      	beq.n	8002dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dea:	d107      	bne.n	8002dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d10f      	bne.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e017      	b.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4013      	ands	r3, r2
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d19b      	bne.n	8002da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e86:	f7fd ff45 	bl	8000d14 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e96:	f7fd ff3d 	bl	8000d14 <HAL_GetTick>
 8002e9a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e9c:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00da      	lsls	r2, r3, #3
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	0d1b      	lsrs	r3, r3, #20
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002eb4:	e05f      	b.n	8002f76 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ebc:	d106      	bne.n	8002ecc <SPI_WaitFifoStateUntilTimeout+0x54>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed2:	d050      	beq.n	8002f76 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed4:	f7fd ff1e 	bl	8000d14 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d902      	bls.n	8002eea <SPI_WaitFifoStateUntilTimeout+0x72>
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d13d      	bne.n	8002f66 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f02:	d111      	bne.n	8002f28 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f0c:	d004      	beq.n	8002f18 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d107      	bne.n	8002f28 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f30:	d10f      	bne.n	8002f52 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e010      	b.n	8002f88 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d197      	bne.n	8002eb6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000000 	.word	0x20000000

08002f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff ff63 	bl	8002e78 <SPI_WaitFifoStateUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e027      	b.n	8003018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fec8 	bl	8002d68 <SPI_WaitFlagStateUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e014      	b.n	8003018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff3c 	bl	8002e78 <SPI_WaitFifoStateUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e000      	b.n	8003018 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e040      	b.n	80030b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fd2a 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f82c 	bl	80030bc <UART_SetConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 faaa 	bl	80035d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800308a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800309a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fb31 	bl	8003714 <UART_CheckIdleState>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030bc:	b5b0      	push	{r4, r5, r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4bad      	ldr	r3, [pc, #692]	; (800339c <UART_SetConfig+0x2e0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	69f9      	ldr	r1, [r7, #28]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4aa2      	ldr	r2, [pc, #648]	; (80033a0 <UART_SetConfig+0x2e4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	430a      	orrs	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a99      	ldr	r2, [pc, #612]	; (80033a4 <UART_SetConfig+0x2e8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d121      	bne.n	8003186 <UART_SetConfig+0xca>
 8003142:	4b99      	ldr	r3, [pc, #612]	; (80033a8 <UART_SetConfig+0x2ec>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d817      	bhi.n	8003180 <UART_SetConfig+0xc4>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0x9c>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	08003169 	.word	0x08003169
 800315c:	08003175 	.word	0x08003175
 8003160:	0800316f 	.word	0x0800316f
 8003164:	0800317b 	.word	0x0800317b
 8003168:	2301      	movs	r3, #1
 800316a:	76fb      	strb	r3, [r7, #27]
 800316c:	e0e7      	b.n	800333e <UART_SetConfig+0x282>
 800316e:	2302      	movs	r3, #2
 8003170:	76fb      	strb	r3, [r7, #27]
 8003172:	e0e4      	b.n	800333e <UART_SetConfig+0x282>
 8003174:	2304      	movs	r3, #4
 8003176:	76fb      	strb	r3, [r7, #27]
 8003178:	e0e1      	b.n	800333e <UART_SetConfig+0x282>
 800317a:	2308      	movs	r3, #8
 800317c:	76fb      	strb	r3, [r7, #27]
 800317e:	e0de      	b.n	800333e <UART_SetConfig+0x282>
 8003180:	2310      	movs	r3, #16
 8003182:	76fb      	strb	r3, [r7, #27]
 8003184:	e0db      	b.n	800333e <UART_SetConfig+0x282>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a88      	ldr	r2, [pc, #544]	; (80033ac <UART_SetConfig+0x2f0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d132      	bne.n	80031f6 <UART_SetConfig+0x13a>
 8003190:	4b85      	ldr	r3, [pc, #532]	; (80033a8 <UART_SetConfig+0x2ec>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d828      	bhi.n	80031f0 <UART_SetConfig+0x134>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <UART_SetConfig+0xe8>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031f1 	.word	0x080031f1
 80031ac:	080031f1 	.word	0x080031f1
 80031b0:	080031f1 	.word	0x080031f1
 80031b4:	080031e5 	.word	0x080031e5
 80031b8:	080031f1 	.word	0x080031f1
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	080031f1 	.word	0x080031f1
 80031c4:	080031df 	.word	0x080031df
 80031c8:	080031f1 	.word	0x080031f1
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	080031f1 	.word	0x080031f1
 80031d4:	080031eb 	.word	0x080031eb
 80031d8:	2300      	movs	r3, #0
 80031da:	76fb      	strb	r3, [r7, #27]
 80031dc:	e0af      	b.n	800333e <UART_SetConfig+0x282>
 80031de:	2302      	movs	r3, #2
 80031e0:	76fb      	strb	r3, [r7, #27]
 80031e2:	e0ac      	b.n	800333e <UART_SetConfig+0x282>
 80031e4:	2304      	movs	r3, #4
 80031e6:	76fb      	strb	r3, [r7, #27]
 80031e8:	e0a9      	b.n	800333e <UART_SetConfig+0x282>
 80031ea:	2308      	movs	r3, #8
 80031ec:	76fb      	strb	r3, [r7, #27]
 80031ee:	e0a6      	b.n	800333e <UART_SetConfig+0x282>
 80031f0:	2310      	movs	r3, #16
 80031f2:	76fb      	strb	r3, [r7, #27]
 80031f4:	e0a3      	b.n	800333e <UART_SetConfig+0x282>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <UART_SetConfig+0x2f4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d120      	bne.n	8003242 <UART_SetConfig+0x186>
 8003200:	4b69      	ldr	r3, [pc, #420]	; (80033a8 <UART_SetConfig+0x2ec>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800320a:	2b30      	cmp	r3, #48	; 0x30
 800320c:	d013      	beq.n	8003236 <UART_SetConfig+0x17a>
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d814      	bhi.n	800323c <UART_SetConfig+0x180>
 8003212:	2b20      	cmp	r3, #32
 8003214:	d009      	beq.n	800322a <UART_SetConfig+0x16e>
 8003216:	2b20      	cmp	r3, #32
 8003218:	d810      	bhi.n	800323c <UART_SetConfig+0x180>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <UART_SetConfig+0x168>
 800321e:	2b10      	cmp	r3, #16
 8003220:	d006      	beq.n	8003230 <UART_SetConfig+0x174>
 8003222:	e00b      	b.n	800323c <UART_SetConfig+0x180>
 8003224:	2300      	movs	r3, #0
 8003226:	76fb      	strb	r3, [r7, #27]
 8003228:	e089      	b.n	800333e <UART_SetConfig+0x282>
 800322a:	2302      	movs	r3, #2
 800322c:	76fb      	strb	r3, [r7, #27]
 800322e:	e086      	b.n	800333e <UART_SetConfig+0x282>
 8003230:	2304      	movs	r3, #4
 8003232:	76fb      	strb	r3, [r7, #27]
 8003234:	e083      	b.n	800333e <UART_SetConfig+0x282>
 8003236:	2308      	movs	r3, #8
 8003238:	76fb      	strb	r3, [r7, #27]
 800323a:	e080      	b.n	800333e <UART_SetConfig+0x282>
 800323c:	2310      	movs	r3, #16
 800323e:	76fb      	strb	r3, [r7, #27]
 8003240:	e07d      	b.n	800333e <UART_SetConfig+0x282>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5b      	ldr	r2, [pc, #364]	; (80033b4 <UART_SetConfig+0x2f8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d120      	bne.n	800328e <UART_SetConfig+0x1d2>
 800324c:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <UART_SetConfig+0x2ec>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003256:	2bc0      	cmp	r3, #192	; 0xc0
 8003258:	d013      	beq.n	8003282 <UART_SetConfig+0x1c6>
 800325a:	2bc0      	cmp	r3, #192	; 0xc0
 800325c:	d814      	bhi.n	8003288 <UART_SetConfig+0x1cc>
 800325e:	2b80      	cmp	r3, #128	; 0x80
 8003260:	d009      	beq.n	8003276 <UART_SetConfig+0x1ba>
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d810      	bhi.n	8003288 <UART_SetConfig+0x1cc>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <UART_SetConfig+0x1b4>
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d006      	beq.n	800327c <UART_SetConfig+0x1c0>
 800326e:	e00b      	b.n	8003288 <UART_SetConfig+0x1cc>
 8003270:	2300      	movs	r3, #0
 8003272:	76fb      	strb	r3, [r7, #27]
 8003274:	e063      	b.n	800333e <UART_SetConfig+0x282>
 8003276:	2302      	movs	r3, #2
 8003278:	76fb      	strb	r3, [r7, #27]
 800327a:	e060      	b.n	800333e <UART_SetConfig+0x282>
 800327c:	2304      	movs	r3, #4
 800327e:	76fb      	strb	r3, [r7, #27]
 8003280:	e05d      	b.n	800333e <UART_SetConfig+0x282>
 8003282:	2308      	movs	r3, #8
 8003284:	76fb      	strb	r3, [r7, #27]
 8003286:	e05a      	b.n	800333e <UART_SetConfig+0x282>
 8003288:	2310      	movs	r3, #16
 800328a:	76fb      	strb	r3, [r7, #27]
 800328c:	e057      	b.n	800333e <UART_SetConfig+0x282>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a49      	ldr	r2, [pc, #292]	; (80033b8 <UART_SetConfig+0x2fc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d125      	bne.n	80032e4 <UART_SetConfig+0x228>
 8003298:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <UART_SetConfig+0x2ec>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a6:	d017      	beq.n	80032d8 <UART_SetConfig+0x21c>
 80032a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ac:	d817      	bhi.n	80032de <UART_SetConfig+0x222>
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d00b      	beq.n	80032cc <UART_SetConfig+0x210>
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d811      	bhi.n	80032de <UART_SetConfig+0x222>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <UART_SetConfig+0x20a>
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	d006      	beq.n	80032d2 <UART_SetConfig+0x216>
 80032c4:	e00b      	b.n	80032de <UART_SetConfig+0x222>
 80032c6:	2300      	movs	r3, #0
 80032c8:	76fb      	strb	r3, [r7, #27]
 80032ca:	e038      	b.n	800333e <UART_SetConfig+0x282>
 80032cc:	2302      	movs	r3, #2
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e035      	b.n	800333e <UART_SetConfig+0x282>
 80032d2:	2304      	movs	r3, #4
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e032      	b.n	800333e <UART_SetConfig+0x282>
 80032d8:	2308      	movs	r3, #8
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e02f      	b.n	800333e <UART_SetConfig+0x282>
 80032de:	2310      	movs	r3, #16
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e02c      	b.n	800333e <UART_SetConfig+0x282>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2d      	ldr	r2, [pc, #180]	; (80033a0 <UART_SetConfig+0x2e4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d125      	bne.n	800333a <UART_SetConfig+0x27e>
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <UART_SetConfig+0x2ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032fc:	d017      	beq.n	800332e <UART_SetConfig+0x272>
 80032fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003302:	d817      	bhi.n	8003334 <UART_SetConfig+0x278>
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003308:	d00b      	beq.n	8003322 <UART_SetConfig+0x266>
 800330a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330e:	d811      	bhi.n	8003334 <UART_SetConfig+0x278>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <UART_SetConfig+0x260>
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003318:	d006      	beq.n	8003328 <UART_SetConfig+0x26c>
 800331a:	e00b      	b.n	8003334 <UART_SetConfig+0x278>
 800331c:	2300      	movs	r3, #0
 800331e:	76fb      	strb	r3, [r7, #27]
 8003320:	e00d      	b.n	800333e <UART_SetConfig+0x282>
 8003322:	2302      	movs	r3, #2
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e00a      	b.n	800333e <UART_SetConfig+0x282>
 8003328:	2304      	movs	r3, #4
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e007      	b.n	800333e <UART_SetConfig+0x282>
 800332e:	2308      	movs	r3, #8
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e004      	b.n	800333e <UART_SetConfig+0x282>
 8003334:	2310      	movs	r3, #16
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e001      	b.n	800333e <UART_SetConfig+0x282>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <UART_SetConfig+0x2e4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	f040 8087 	bne.w	8003458 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800334a:	7efb      	ldrb	r3, [r7, #27]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d837      	bhi.n	80033c0 <UART_SetConfig+0x304>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <UART_SetConfig+0x29c>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	0800337d 	.word	0x0800337d
 800335c:	080033c1 	.word	0x080033c1
 8003360:	08003385 	.word	0x08003385
 8003364:	080033c1 	.word	0x080033c1
 8003368:	0800338b 	.word	0x0800338b
 800336c:	080033c1 	.word	0x080033c1
 8003370:	080033c1 	.word	0x080033c1
 8003374:	080033c1 	.word	0x080033c1
 8003378:	08003393 	.word	0x08003393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800337c:	f7fe fd9a 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8003380:	6178      	str	r0, [r7, #20]
        break;
 8003382:	e022      	b.n	80033ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <UART_SetConfig+0x300>)
 8003386:	617b      	str	r3, [r7, #20]
        break;
 8003388:	e01f      	b.n	80033ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338a:	f7fe fcfb 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 800338e:	6178      	str	r0, [r7, #20]
        break;
 8003390:	e01b      	b.n	80033ca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	617b      	str	r3, [r7, #20]
        break;
 8003398:	e017      	b.n	80033ca <UART_SetConfig+0x30e>
 800339a:	bf00      	nop
 800339c:	efff69f3 	.word	0xefff69f3
 80033a0:	40008000 	.word	0x40008000
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40004400 	.word	0x40004400
 80033b0:	40004800 	.word	0x40004800
 80033b4:	40004c00 	.word	0x40004c00
 80033b8:	40005000 	.word	0x40005000
 80033bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	76bb      	strb	r3, [r7, #26]
        break;
 80033c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80f1 	beq.w	80035b4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d305      	bcc.n	80033ee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d902      	bls.n	80033f4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	76bb      	strb	r3, [r7, #26]
 80033f2:	e0df      	b.n	80035b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	020b      	lsls	r3, r1, #8
 8003406:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800340a:	0202      	lsls	r2, r0, #8
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6849      	ldr	r1, [r1, #4]
 8003410:	0849      	lsrs	r1, r1, #1
 8003412:	4608      	mov	r0, r1
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	1814      	adds	r4, r2, r0
 800341a:	eb43 0501 	adc.w	r5, r3, r1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	4620      	mov	r0, r4
 800342a:	4629      	mov	r1, r5
 800342c:	f7fc fecc 	bl	80001c8 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343e:	d308      	bcc.n	8003452 <UART_SetConfig+0x396>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003446:	d204      	bcs.n	8003452 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	e0b0      	b.n	80035b4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	76bb      	strb	r3, [r7, #26]
 8003456:	e0ad      	b.n	80035b4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d15c      	bne.n	800351c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003462:	7efb      	ldrb	r3, [r7, #27]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d828      	bhi.n	80034ba <UART_SetConfig+0x3fe>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x3b4>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	08003495 	.word	0x08003495
 8003474:	0800349d 	.word	0x0800349d
 8003478:	080034a5 	.word	0x080034a5
 800347c:	080034bb 	.word	0x080034bb
 8003480:	080034ab 	.word	0x080034ab
 8003484:	080034bb 	.word	0x080034bb
 8003488:	080034bb 	.word	0x080034bb
 800348c:	080034bb 	.word	0x080034bb
 8003490:	080034b3 	.word	0x080034b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7fe fd0e 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8003498:	6178      	str	r0, [r7, #20]
        break;
 800349a:	e013      	b.n	80034c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800349c:	f7fe fd20 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 80034a0:	6178      	str	r0, [r7, #20]
        break;
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a4:	4b49      	ldr	r3, [pc, #292]	; (80035cc <UART_SetConfig+0x510>)
 80034a6:	617b      	str	r3, [r7, #20]
        break;
 80034a8:	e00c      	b.n	80034c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034aa:	f7fe fc6b 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 80034ae:	6178      	str	r0, [r7, #20]
        break;
 80034b0:	e008      	b.n	80034c4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	617b      	str	r3, [r7, #20]
        break;
 80034b8:	e004      	b.n	80034c4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	76bb      	strb	r3, [r7, #26]
        break;
 80034c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d074      	beq.n	80035b4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005a      	lsls	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	441a      	add	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d916      	bls.n	8003516 <UART_SetConfig+0x45a>
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ee:	d212      	bcs.n	8003516 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f023 030f 	bic.w	r3, r3, #15
 80034f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	b29a      	uxth	r2, r3
 8003506:	89fb      	ldrh	r3, [r7, #14]
 8003508:	4313      	orrs	r3, r2
 800350a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	89fa      	ldrh	r2, [r7, #14]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	e04e      	b.n	80035b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	76bb      	strb	r3, [r7, #26]
 800351a:	e04b      	b.n	80035b4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351c:	7efb      	ldrb	r3, [r7, #27]
 800351e:	2b08      	cmp	r3, #8
 8003520:	d827      	bhi.n	8003572 <UART_SetConfig+0x4b6>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x46c>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003555 	.word	0x08003555
 8003530:	0800355d 	.word	0x0800355d
 8003534:	08003573 	.word	0x08003573
 8003538:	08003563 	.word	0x08003563
 800353c:	08003573 	.word	0x08003573
 8003540:	08003573 	.word	0x08003573
 8003544:	08003573 	.word	0x08003573
 8003548:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe fcb2 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8003550:	6178      	str	r0, [r7, #20]
        break;
 8003552:	e013      	b.n	800357c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7fe fcc4 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 8003558:	6178      	str	r0, [r7, #20]
        break;
 800355a:	e00f      	b.n	800357c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <UART_SetConfig+0x510>)
 800355e:	617b      	str	r3, [r7, #20]
        break;
 8003560:	e00c      	b.n	800357c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7fe fc0f 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8003566:	6178      	str	r0, [r7, #20]
        break;
 8003568:	e008      	b.n	800357c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356e:	617b      	str	r3, [r7, #20]
        break;
 8003570:	e004      	b.n	800357c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	76bb      	strb	r3, [r7, #26]
        break;
 800357a:	bf00      	nop
    }

    if (pclk != 0U)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d018      	beq.n	80035b4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	085a      	lsrs	r2, r3, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	441a      	add	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	b29b      	uxth	r3, r3
 8003596:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d908      	bls.n	80035b0 <UART_SetConfig+0x4f4>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d204      	bcs.n	80035b0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	e001      	b.n	80035b4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80035c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bdb0      	pop	{r4, r5, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	00f42400 	.word	0x00f42400

080035d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01a      	beq.n	80036e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ce:	d10a      	bne.n	80036e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	605a      	str	r2, [r3, #4]
  }
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003722:	f7fd faf7 	bl	8000d14 <HAL_GetTick>
 8003726:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b08      	cmp	r3, #8
 8003734:	d10e      	bne.n	8003754 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003736:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f82a 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e020      	b.n	8003796 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d10e      	bne.n	8003780 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003762:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f814 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e00a      	b.n	8003796 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ae:	e05d      	b.n	800386c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b6:	d059      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b8:	f7fd faac 	bl	8000d14 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d302      	bcc.n	80037ce <UART_WaitOnFlagUntilTimeout+0x30>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11b      	bne.n	8003806 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e042      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02b      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003822:	d123      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800382c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800383c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e00f      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	429a      	cmp	r2, r3
 8003888:	d092      	beq.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <__libc_init_array>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4d0d      	ldr	r5, [pc, #52]	; (80038cc <__libc_init_array+0x38>)
 8003898:	4c0d      	ldr	r4, [pc, #52]	; (80038d0 <__libc_init_array+0x3c>)
 800389a:	1b64      	subs	r4, r4, r5
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	2600      	movs	r6, #0
 80038a0:	42a6      	cmp	r6, r4
 80038a2:	d109      	bne.n	80038b8 <__libc_init_array+0x24>
 80038a4:	4d0b      	ldr	r5, [pc, #44]	; (80038d4 <__libc_init_array+0x40>)
 80038a6:	4c0c      	ldr	r4, [pc, #48]	; (80038d8 <__libc_init_array+0x44>)
 80038a8:	f000 f820 	bl	80038ec <_init>
 80038ac:	1b64      	subs	r4, r4, r5
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	2600      	movs	r6, #0
 80038b2:	42a6      	cmp	r6, r4
 80038b4:	d105      	bne.n	80038c2 <__libc_init_array+0x2e>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038bc:	4798      	blx	r3
 80038be:	3601      	adds	r6, #1
 80038c0:	e7ee      	b.n	80038a0 <__libc_init_array+0xc>
 80038c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c6:	4798      	blx	r3
 80038c8:	3601      	adds	r6, #1
 80038ca:	e7f2      	b.n	80038b2 <__libc_init_array+0x1e>
 80038cc:	08003958 	.word	0x08003958
 80038d0:	08003958 	.word	0x08003958
 80038d4:	08003958 	.word	0x08003958
 80038d8:	0800395c 	.word	0x0800395c

080038dc <memset>:
 80038dc:	4402      	add	r2, r0
 80038de:	4603      	mov	r3, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <_init>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr

080038f8 <_fini>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr
